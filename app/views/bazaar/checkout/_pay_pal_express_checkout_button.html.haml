%div.pay_pal_express_checkout_btn{ id: (args[:id] || 'paypal-button-container') }
= hidden_field_tag 'transaction_options[pay_pal][payment_id]', '', id: "#{(args[:id] || 'paypal-button-container')}_payment_id"
= hidden_field_tag 'transaction_options[pay_pal][payer_id]', '', id: "#{(args[:id] || 'paypal-button-container')}_payer_id"

:javascript
	(function( container_id ){
		container_selector = "#"+container_id

		paypal.Button.render({

			env: '#{ args[:mode] || ENV['PAYPAL_EXPRESS_CHECKOUT_MODE'] || 'sandbox' }', // sandbox | production

			client: {
				sandbox:    '#{ args[:sandbox_client_id] || ENV['PAYPAL_EXPRESS_CHECKOUT_SANDBOX_CLIENT_ID'] || 'AZDxjDScFpQtjWTOUtWKbyN_bDt4OgqaF4eYXlewfBP4-8aqX3PiV8e1GWU6liB2CUXlkA59kJXE7M6R' }',
				production: '#{ args[:client_id] || ENV['PAYPAL_EXPRESS_CHECKOUT_CLIENT_ID'] || 'AZDxjDScFpQtjWTOUtWKbyN_bDt4OgqaF4eYXlewfBP4-8aqX3PiV8e1GWU6liB2CUXlkA59kJXE7M6R' }'
			},

			// Show the buyer a 'Pay Now' button in the checkout flow
			commit: false,

			// payment() is called when the button is clicked
			payment: function(data, actions) {

				// Make a call to the REST api to create the payment
				return actions.payment.create({
					payment: {
						transactions: [
							{
								amount: { total: '#{@order.total_as_money}', currency: '#{@order.currency.upcase}' }
							}
						]
					},
					experience: {
						input_fields: {
							no_shipping: 1
						}
					}
				});
			},

			// onAuthorize() is called when the buyer approves the payment
			onAuthorize: function(data, actions) {
				$(container_selector + "_payment_id").val( data.paymentID )
				$(container_selector + "_payer_id").val( data.payerID )
				$(container_selector).parents('form').submit()
			}

		}, container_selector );

	})( '#{(args[:id] || 'paypal-button-container')}' )
